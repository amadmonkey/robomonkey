[{"E:\\React\\robomonkey\\src\\index.js":"1","E:\\React\\robomonkey\\src\\reportWebVitals.js":"2","E:\\React\\robomonkey\\src\\main\\App\\index.jsx":"3","E:\\React\\robomonkey\\src\\components\\Header\\index.jsx":"4","E:\\React\\robomonkey\\src\\components\\Footer\\index.jsx":"5","E:\\React\\robomonkey\\src\\main\\Login\\index.jsx":"6","E:\\React\\robomonkey\\src\\main\\Home\\index.jsx":"7","E:\\React\\robomonkey\\src\\routes.js":"8","E:\\React\\robomonkey\\src\\components\\MainWrapper\\index.jsx":"9","E:\\React\\robomonkey\\src\\components\\Card\\index.jsx":"10","E:\\React\\robomonkey\\src\\components\\ProfileCard\\index.jsx":"11","E:\\React\\robomonkey\\src\\components\\OngoingExams\\index.jsx":"12","E:\\React\\robomonkey\\src\\components\\OngoingExams\\OngoingExamItem.jsx":"13","E:\\React\\robomonkey\\src\\components\\Chat\\index.jsx":"14","E:\\React\\robomonkey\\src\\main\\404\\index.jsx":"15","E:\\React\\robomonkey\\src\\components\\Tooltip\\index.jsx":"16","E:\\React\\robomonkey\\src\\components\\ExamsTable\\index.jsx":"17","E:\\React\\robomonkey\\src\\main\\Exams\\index.jsx":"18","E:\\React\\robomonkey\\src\\components\\Tag\\index.jsx":"19","E:\\React\\robomonkey\\src\\main\\Exams\\NewExam.jsx":"20","E:\\React\\robomonkey\\src\\main\\Exams\\Details.jsx":"21","E:\\React\\robomonkey\\src\\main\\Exams\\Questions.jsx":"22","E:\\React\\robomonkey\\src\\main\\Exams\\Review.jsx":"23","E:\\React\\robomonkey\\src\\main\\Exams\\Finish.jsx":"24","E:\\React\\robomonkey\\src\\components\\Input\\index.jsx":"25","E:\\React\\robomonkey\\src\\components\\InputWrapper\\index.jsx":"26","E:\\React\\robomonkey\\src\\components\\Radio\\index.jsx":"27","E:\\React\\robomonkey\\src\\components\\Question\\index.jsx":"28","E:\\React\\robomonkey\\src\\components\\Select\\index.jsx":"29","E:\\React\\robomonkey\\src\\components\\Question\\Identify.jsx":"30","E:\\React\\robomonkey\\src\\components\\Question\\QuestionWrapper.jsx":"31","E:\\React\\robomonkey\\src\\data\\Question.js":"32","E:\\React\\robomonkey\\src\\components\\Question\\MultipleChoice.jsx":"33","E:\\React\\robomonkey\\src\\components\\Question\\Code.jsx":"34","E:\\React\\robomonkey\\src\\components\\Question\\Essay.jsx":"35","E:\\React\\robomonkey\\src\\components\\Question\\Matching.jsx":"36","E:\\React\\robomonkey\\src\\components\\Question\\TrueFalse.jsx":"37","E:\\React\\robomonkey\\src\\components\\Question\\Video.jsx":"38","E:\\React\\robomonkey\\src\\data\\ErrorMessage.js":"39","E:\\React\\robomonkey\\src\\components\\MatchInput\\index.jsx":"40","E:\\React\\robomonkey\\src\\data\\Colors.js":"41","E:\\React\\robomonkey\\src\\components\\Form\\index.jsx":"42","E:\\React\\robomonkey\\src\\components\\TextEditor\\index.jsx":"43"},{"size":505,"mtime":1612012073041,"results":"44","hashOfConfig":"45"},{"size":362,"mtime":499162500000,"results":"46","hashOfConfig":"45"},{"size":609,"mtime":1611556271859,"results":"47","hashOfConfig":"45"},{"size":1161,"mtime":1611479405854,"results":"48","hashOfConfig":"45"},{"size":332,"mtime":1610780637051,"results":"49","hashOfConfig":"45"},{"size":155,"mtime":1610570161420,"results":"50","hashOfConfig":"45"},{"size":3528,"mtime":1613013130838,"results":"51","hashOfConfig":"45"},{"size":1547,"mtime":1611815053473,"results":"52","hashOfConfig":"45"},{"size":402,"mtime":1611577501595,"results":"53","hashOfConfig":"45"},{"size":1516,"mtime":1611569219637,"results":"54","hashOfConfig":"45"},{"size":3226,"mtime":1611672426578,"results":"55","hashOfConfig":"45"},{"size":523,"mtime":1610779856941,"results":"56","hashOfConfig":"45"},{"size":951,"mtime":1610773207523,"results":"57","hashOfConfig":"45"},{"size":519,"mtime":1611556328551,"results":"58","hashOfConfig":"45"},{"size":301,"mtime":1611296341028,"results":"59","hashOfConfig":"45"},{"size":609,"mtime":1611305287160,"results":"60","hashOfConfig":"45"},{"size":5435,"mtime":1613013242251,"results":"61","hashOfConfig":"45"},{"size":673,"mtime":1612059552364,"results":"62","hashOfConfig":"45"},{"size":394,"mtime":1611560886438,"results":"63","hashOfConfig":"45"},{"size":2220,"mtime":1611815246125,"results":"64","hashOfConfig":"45"},{"size":7176,"mtime":1613018850607,"results":"65","hashOfConfig":"45"},{"size":2169,"mtime":1613044657515,"results":"66","hashOfConfig":"45"},{"size":354,"mtime":1611576243080,"results":"67","hashOfConfig":"45"},{"size":153,"mtime":1611575176138,"results":"68","hashOfConfig":"45"},{"size":1131,"mtime":1613104587168,"results":"69","hashOfConfig":"45"},{"size":685,"mtime":1613012103566,"results":"70","hashOfConfig":"45"},{"size":1151,"mtime":1611981014960,"results":"71","hashOfConfig":"45"},{"size":4169,"mtime":1612075689977,"results":"72","hashOfConfig":"73"},{"size":997,"mtime":1613105500641,"results":"74","hashOfConfig":"45"},{"size":1345,"mtime":1612231608307,"results":"75","hashOfConfig":"45"},{"size":2335,"mtime":1613009108035,"results":"76","hashOfConfig":"45"},{"size":1496,"mtime":1612226671155,"results":"77","hashOfConfig":"45"},{"size":3575,"mtime":1612893704734,"results":"78","hashOfConfig":"45"},{"size":412,"mtime":1612082347124,"results":"79","hashOfConfig":"45"},{"size":1167,"mtime":1613103158384,"results":"80","hashOfConfig":"45"},{"size":13256,"mtime":1613045284395,"results":"81","hashOfConfig":"45"},{"size":2459,"mtime":1612802343154,"results":"82","hashOfConfig":"45"},{"size":416,"mtime":1612082343063,"results":"83","hashOfConfig":"45"},{"size":635,"mtime":1612505467591,"results":"84","hashOfConfig":"45"},{"size":4110,"mtime":1613107805606,"results":"85","hashOfConfig":"45"},{"size":263,"mtime":1612502491205,"results":"86","hashOfConfig":"45"},{"size":1275,"mtime":1613105329771,"results":"87","hashOfConfig":"45"},{"size":2018,"mtime":1613194109468,"results":"88","hashOfConfig":"45"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"qzhqes",{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"95","messages":"96","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"102","messages":"103","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"112","messages":"113","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"121","messages":"122","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"126","messages":"127","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"134","messages":"135","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"154","messages":"155","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"156","usedDeprecatedRules":"157"},"20jmwp",{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"162","messages":"163","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"164"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"167"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"170"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"175","messages":"176","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"177"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"180"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"183","messages":"184","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"185"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"188"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"191"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"194","messages":"195","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"E:\\React\\robomonkey\\src\\index.js",[],"E:\\React\\robomonkey\\src\\reportWebVitals.js",[],"E:\\React\\robomonkey\\src\\main\\App\\index.jsx",[],"E:\\React\\robomonkey\\src\\components\\Header\\index.jsx",["196"],"import React, { useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport Logo from '../../img/robomonkey.svg';\r\nimport ProfileCard from '../ProfileCard';\r\nimport './style.scss';\r\n\r\nconst Header = () => {\r\n\r\n    const [profileActive, setProfileActive] = useState(false);\r\n\r\n    return (\r\n        <header className=\"main-header\">\r\n            <div className=\"bar\">\r\n                <Link to=\"/\"><img src={Logo} alt=\"Logo\" /></Link>\r\n                <nav>\r\n                    <ul>\r\n                        <li><Link to=\"/\">Dashboard</Link></li>\r\n                        <li><Link to=\"/activity\">Activity</Link></li>\r\n                        <li><Link to=\"/sheets\">Sheets</Link></li>\r\n                        <li><Link to=\"/classrooms\">Classrooms</Link></li>\r\n                        <li><a onClick={() => setProfileActive(!profileActive)}>Kamote <span>&rsaquo;</span></a></li>\r\n                    </ul>\r\n                </nav>\r\n            </div>\r\n            <div className={`profile-card-container ${profileActive ? 'active' : ''}`}>\r\n                <ProfileCard />\r\n            </div>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header\r\n","E:\\React\\robomonkey\\src\\components\\Footer\\index.jsx",[],"E:\\React\\robomonkey\\src\\main\\Login\\index.jsx",[],"E:\\React\\robomonkey\\src\\main\\Home\\index.jsx",["197","198"],"import React, { useState } from 'react';\r\nimport Test from '../../img/history.svg'\r\nimport Card from '../../components/Card';\r\nimport MainWrapper from '../../components/MainWrapper';\r\nimport ProfileCard from '../../components/ProfileCard';\r\nimport OngoingExams from '../../components/OngoingExams';\r\nimport Chat from '../../components/Chat';\r\nimport ExamsTable from '../../components/ExamsTable';\r\n\r\nconst Home = () => {\r\n\r\n    const showMore = () => {\r\n        alert('fetch');\r\n    }\r\n\r\n    return (\r\n        <MainWrapper>\r\n            <div style={{ display: \"grid\", gridTemplateColumns: \"1fr 2fr\" }}>\r\n                <div style={{ padding: \"20px\", paddingTop: \"130px\" }}>\r\n                    <ProfileCard>\r\n                        test\r\n                    </ProfileCard>\r\n                    <OngoingExams />\r\n                </div>\r\n                <div style={{ padding: \"20px\", paddingTop: \"130px\" }}>\r\n                    <ExamsTable link={{ label: \"Go to Exams\", to: \"/exams\" }} dashboard />\r\n                    <Card title={<React.Fragment><img style={{ marginRight: \"5px\" }} src={Test} /> Recent Activity</React.Fragment>} link={{ label: \"Go to Polls\", to: \"/polls\" }} showMore={showMore}>\r\n                        <table>\r\n                            <tbody>\r\n                                <tr>\r\n                                    <td width=\"60%\">test</td>\r\n                                    <td width=\"40%\">test</td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td width=\"60%\">test</td>\r\n                                    <td width=\"40%\">test</td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td width=\"60%\">test</td>\r\n                                    <td width=\"40%\">test</td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td width=\"60%\">test</td>\r\n                                    <td width=\"40%\">test</td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td width=\"60%\">test</td>\r\n                                    <td width=\"40%\">test</td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td width=\"60%\">test</td>\r\n                                    <td width=\"40%\">test</td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td width=\"60%\">test</td>\r\n                                    <td width=\"40%\">test</td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td width=\"60%\">test</td>\r\n                                    <td width=\"40%\">test</td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td width=\"60%\">test</td>\r\n                                    <td width=\"40%\">test</td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td width=\"60%\">test</td>\r\n                                    <td width=\"40%\">test</td>\r\n                                </tr>\r\n                            </tbody>\r\n                        </table>\r\n                    </Card>\r\n                </div>\r\n            </div>\r\n            <Chat />\r\n        </MainWrapper>\r\n    )\r\n}\r\n\r\nexport default Home\r\n","E:\\React\\robomonkey\\src\\routes.js",["199"],"import Login from './main/Login';\r\nimport Home from './main/Home';\r\nimport Exams from './main/Exams';\r\nimport NewExam from './main/Exams/NewExam';\r\nimport Details from './main/Exams/Details';\r\nimport NotFound from './main/404';\r\n\r\nclass Route {\r\n    constructor({ label = \"\", path = \"\", component = \"\", exact = true, loggedin = false, visible = false }) {\r\n        this.label = label;\r\n        this.path = path;\r\n        this.component = component;\r\n        this.exact = exact;\r\n        this.visible = visible;\r\n    }\r\n}\r\n\r\nconst routes = {\r\n    home: new Route({\r\n        label: \"Home\",\r\n        path: \"/\",\r\n        component: Home,\r\n        exact: true,\r\n        visible: true\r\n    }),\r\n    login: new Route({\r\n        label: \"Login\",\r\n        path: \"/login\",\r\n        component: Login,\r\n        exact: true,\r\n        visible: false\r\n    }),\r\n    exams: new Route({\r\n        label: \"Exams\",\r\n        path: \"/exams\",\r\n        component: Exams,\r\n        exact: true,\r\n        visible: false\r\n    }),\r\n    new_exam: new Route({\r\n        label: \"New Exam\",\r\n        path: \"/exams/new-exam\",\r\n        component: NewExam,\r\n        exact: true,\r\n        visible: false,\r\n    }),\r\n    new_exam_part: new Route({\r\n        label: \"New Exam\",\r\n        path: \"/exams/new-exam/:part\",\r\n        component: NewExam,\r\n        exact: true,\r\n        visible: false,\r\n    }),\r\n    not_found: new Route({\r\n        label: \"404\",\r\n        path: \"/404\",\r\n        component: NotFound,\r\n        exact: false,\r\n        visible: false\r\n    })\r\n}\r\n\r\nexport default routes\r\n","E:\\React\\robomonkey\\src\\components\\MainWrapper\\index.jsx",[],"E:\\React\\robomonkey\\src\\components\\Card\\index.jsx",[],"E:\\React\\robomonkey\\src\\components\\ProfileCard\\index.jsx",["200","201","202","203"],"import React, { useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport placeholderImage from '../../img/Untitled.png';\r\nimport Card from '../Card';\r\nimport Tooltip from '../../components/Tooltip';\r\nimport './style.scss';\r\nimport Times from '../../img/times.svg';\r\nimport Settings from '../../img/settings.svg';\r\n\r\nconst ProfileCard = () => {\r\n\r\n    let name = \"Kamote\";\r\n\r\n    const statusConst = {\r\n        ONLINE: \"online\",\r\n        OFFLINE: \"offline\",\r\n        BUSY: \"busy\",\r\n        IDLE: \"idle\"\r\n    }\r\n    const [status, setStatus] = useState(statusConst.IDLE);\r\n    const [choiceStatus, setChoiceStatus] = useState('');\r\n\r\n    const updateStatus = (newStatus) => {\r\n        setStatus(newStatus);\r\n    }\r\n\r\n    return (\r\n        <Card className=\"profile-card\">\r\n            <header className=\"profile-card-header\">\r\n                <div>\r\n                    <div className={`profile-image ${status}`}>\r\n                        <img src={placeholderImage} />\r\n                    </div>\r\n                    <div className={`status-container ${choiceStatus}`}>\r\n                        <button className={`status-item online ${status === statusConst.ONLINE ? 'active' : ''}`} onClick={() => updateStatus(statusConst.ONLINE)}><div></div>Online</button>\r\n                        <button className={`status-item offline ${status === statusConst.OFFLINE ? 'active' : ''}`} onClick={() => updateStatus(statusConst.OFFLINE)}><div></div>Offline</button>\r\n                        <button className={`status-item busy ${status === statusConst.BUSY ? 'active' : ''}`} onClick={() => updateStatus(statusConst.BUSY)}><div></div>Busy</button>\r\n                        <button className={`status-item idle ${status === statusConst.IDLE ? 'active' : ''}`} onClick={() => updateStatus(statusConst.IDLE)}><div></div>Idle</button>\r\n                    </div>\r\n                </div>\r\n            </header>\r\n            <h2>Welcome back,</h2>\r\n            <h1>{name}</h1>\r\n            <ul className=\"alerts\">\r\n                <li className=\"alert-item\">You have <span className=\"bold danger\">2 new messages</span></li>\r\n                <li className=\"alert-item\"><span className=\"bold\">Patatas</span>, and <span className=\"bold\">2 others</span> finished <span className=\"bold info\">Lorem Ipsum</span></li>\r\n                <li className=\"alert-item\"><span className=\"bold info\">Lorem Ipsum</span> is ending in <span className=\"bold danger\">2 days</span>. <Link to=\"/\" className=\"link bold\">Remind</Link></li>\r\n                <li className=\"alert-item\"><span className=\"bold info\">Lorem Ipsum 2</span> is ending in <span className=\"bold danger\">8 hours</span>. <Link to=\"/\" className=\"link bold\">Remind</Link></li>\r\n            </ul>\r\n            <div className=\"tools\">\r\n                <Tooltip label=\"Sign Out\" dark>\r\n                    <button aria-label=\"Sign Out\" className=\"signout\"><img src={Times} /></button>\r\n                </Tooltip>\r\n                <Tooltip label=\"Account Settings\">\r\n                    <button aria-label=\"Account Settings\" className=\"settings\"><img src={Settings} /></button>\r\n                </Tooltip>\r\n            </div>\r\n        </Card >\r\n    )\r\n}\r\n\r\nexport default ProfileCard\r\n","E:\\React\\robomonkey\\src\\components\\OngoingExams\\index.jsx",[],"E:\\React\\robomonkey\\src\\components\\OngoingExams\\OngoingExamItem.jsx",[],"E:\\React\\robomonkey\\src\\components\\Chat\\index.jsx",[],"E:\\React\\robomonkey\\src\\main\\404\\index.jsx",["204"],"import React from 'react';\r\nimport ConfusedMonkey from '../../img/monkey-404.svg';\r\n\r\nconst NotFound = () => {\r\n    return (\r\n        <div className=\"404-container\">\r\n            <div>\r\n            <img src={ConfusedMonkey} />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NotFound\r\n","E:\\React\\robomonkey\\src\\components\\Tooltip\\index.jsx",[],"E:\\React\\robomonkey\\src\\components\\ExamsTable\\index.jsx",["205","206","207","208","209"],"import React, { useState, useEffect } from 'react';\r\nimport Exam from '../../img/exam.svg';\r\nimport Plus from '../../img/plus.svg';\r\nimport Card from '../Card';\r\nimport Tooltip from '../../components/Tooltip';\r\nimport Tag from '../../components/Tag';\r\nimport { Link } from 'react-router-dom';\r\nimport { ReactComponent as Pin } from '../../img/pin.svg';\r\nimport { ReactComponent as Trash } from '../../img/trash.svg';\r\nimport './style.scss';\r\n\r\nconst ExamsTable = (props) => {\r\n\r\n    const [examList, setExamList] = useState([]);\r\n\r\n    useEffect(() => {\r\n        setExamList([\r\n            {\r\n                name: \"Lorem Ipsum\",\r\n                date_published: \"October 3, 2020\",\r\n                last_updated: \"an hour ago\",\r\n                questions: {\r\n                    questions_id: 9678354798423,\r\n                    count: 81,\r\n                },\r\n                participants: {\r\n                    participants_id: 390847287564,\r\n                    count: 11\r\n                },\r\n                tags: [\r\n                    {\r\n                        name: \"English\",\r\n                        color: \"#5B8CBC\",\r\n                        link: \"/add-tag-to-filter\",\r\n                    },\r\n                    {\r\n                        name: \"Code\",\r\n                        color: \"#F65C5C\",\r\n                        link: \"/add-tag-to-filter\",\r\n                    },\r\n                    {\r\n                        name: \"Scratch Page\",\r\n                        color: \"#FFC857\",\r\n                        link: \"/add-tag-to-filter\",\r\n                    },\r\n                    {\r\n                        name: \"Calculator\",\r\n                        color: \"#33C778\",\r\n                        link: \"/add-tag-to-filter\",\r\n                    },\r\n                ]\r\n            },\r\n            {\r\n                name: \"Lorem Ipsum\",\r\n                date_published: \"October 3, 2020\",\r\n                last_updated: \"an hour ago\",\r\n                questions: {\r\n                    questions_id: 9678354798423,\r\n                    count: 81,\r\n                },\r\n                participants: {\r\n                    participants_id: 390847287564,\r\n                    count: 11\r\n                },\r\n                tags: [\r\n                    {\r\n                        name: \"English\",\r\n                        color: \"#5B8CBC\",\r\n                        link: \"/add-tag-to-filter\",\r\n                    },\r\n                    {\r\n                        name: \"Code\",\r\n                        color: \"#F65C5C\",\r\n                        link: \"/add-tag-to-filter\",\r\n                    },\r\n                    {\r\n                        name: \"Scratch Page\",\r\n                        color: \"#FFC857\",\r\n                        link: \"/add-tag-to-filter\",\r\n                    },\r\n                    {\r\n                        name: \"Calculator\",\r\n                        color: \"#33C778\",\r\n                        link: \"/add-tag-to-filter\",\r\n                    },\r\n                ]\r\n            }\r\n        ]);\r\n    }, [])\r\n\r\n    const getLink = () => {\r\n        return props.dashboard ?\r\n            { label: \"Go to Exams\", link: \"/exams\" } :\r\n            {\r\n                label:\r\n                    <button>\r\n                        <img src={Exam} />\r\n                        <img src={Plus} />\r\n                    </button>,\r\n                link: \"/new-exam\"\r\n            }\r\n    }\r\n\r\n\r\n    return (\r\n        <Card title={<React.Fragment><img style={{ marginRight: \"5px\" }} src={Exam} /> Exams</React.Fragment>} link={props.link}>\r\n            <table className=\"exams-table\">\r\n                <tbody>\r\n                    {\r\n                        examList.length ?\r\n                            examList.map((obj, i) => {\r\n                                return (\r\n                                    <tr key={i}>\r\n                                        <td className=\"details\">\r\n                                            <h1>{obj.name}</h1>\r\n                                            <p>Published on <b>{obj.date_published}</b></p>\r\n                                            <p>Updated <b>{obj.last_updated}</b></p>\r\n                                        </td>\r\n                                        <td className=\"numbers\">\r\n                                            <p>Questions: <b>{obj.questions.count}</b></p>\r\n                                            <p>Participants: <b>{obj.participants.count}</b></p>\r\n                                        </td>\r\n                                        <td className=\"tags\">\r\n                                            {obj.tags.map((obj, i) => {\r\n                                                return <Tag key={i} data={obj} />\r\n                                            })}\r\n                                        </td>\r\n                                        <td className=\"tools\">\r\n                                            <Tooltip label=\"Pin\"><button className=\"tool-pin\"><Pin /></button></Tooltip>\r\n                                            <Tooltip label=\"Delete\"><button className=\"tool-delete\"><Trash /></button></Tooltip>\r\n                                        </td>\r\n                                    </tr>\r\n                                )\r\n                            }) : <></>\r\n                    }\r\n                </tbody>\r\n            </table >\r\n        </Card >\r\n    )\r\n}\r\n\r\nexport default ExamsTable\r\n","E:\\React\\robomonkey\\src\\main\\Exams\\index.jsx",["210","211","212"],"import React from 'react';\r\nimport MainWrapper from '../../components/MainWrapper';\r\nimport Card from '../../components/Card';\r\nimport ExamsTable from '../../components/ExamsTable';\r\nimport Exam from '../../img/exam.svg';\r\nimport Plus from '../../img/plus.svg';\r\nimport './style.scss';\r\n\r\nconst Exams = () => {\r\n    return (\r\n        <MainWrapper>\r\n            <div style={{ padding: \"20px\", paddingTop: \"80px\" }}>\r\n                <ExamsTable link={{ label: <button><img src={Exam} style={{ height: \"100%\" }} /><img className=\"plus\" src={Plus} /></button>, to: \"/exams/new-exam/details\" }} />\r\n            </div>\r\n        </MainWrapper>\r\n    )\r\n}\r\n\r\nexport default Exams\r\n","E:\\React\\robomonkey\\src\\components\\Tag\\index.jsx",[],"E:\\React\\robomonkey\\src\\main\\Exams\\NewExam.jsx",["213","214"],"import React, { useEffect } from 'react';\r\nimport { Redirect, useHistory } from 'react-router-dom';\r\nimport { ReactComponent as WizardDetails } from '../../img/wizard-details.svg';\r\nimport { ReactComponent as WizardQuestions } from '../../img/wizard-questions.svg';\r\nimport { ReactComponent as WizardReview } from '../../img/wizard-review.svg';\r\nimport { ReactComponent as Line } from '../../img/line.svg';\r\nimport MainWrapper from '../../components/MainWrapper';\r\nimport Details from '../../main/Exams/Details';\r\nimport Questions from '../../main/Exams/Questions';\r\nimport Review from '../../main/Exams/Review';\r\nimport Finish from '../../main/Exams/Finish';\r\nimport './style.scss';\r\n\r\nconst NewExam = (props) => {\r\n\r\n    const part = props.match.params.part;\r\n    const history = useHistory();\r\n\r\n    const getPart = () => {\r\n        switch (props.match.params.part) {\r\n            case \"details\":\r\n                return <Details />\r\n            case \"questions\":\r\n                return <Questions />\r\n            case \"review\":\r\n                return <Review />\r\n            case \"finish\":\r\n                return <Finish />\r\n            default:\r\n                // return <Redirect to=\"/404\" />\r\n                break;\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        // const part = props.match.params.part;\r\n        !part && history.push('/exams/new-exam/details');\r\n    }, [])\r\n\r\n    return (\r\n        <MainWrapper>\r\n            <div style={{ padding: \"20px\", paddingTop: \"50px\" }}>\r\n                <div className=\"wizard-guide\">\r\n                    <WizardDetails className={`wizard-guide-item details ${part === 'details' ? \"active\" : \"done\"}`} />\r\n                    <Line className=\"wizard-guide-line\" />\r\n                    <WizardQuestions className={`wizard-guide-item questions ${part === 'questions' ? \"active\" : (part !== 'details' ? 'done' : '')}`} />\r\n                    <Line className=\"wizard-guide-line\" />\r\n                    <WizardReview className={`wizard-guide-item review ${part === 'review' ? \"active\" : (part === 'finish' ? 'done' : '')}`} />\r\n                </div>\r\n                {getPart()}\r\n            </div>\r\n        </MainWrapper>\r\n    )\r\n}\r\n\r\nexport default NewExam\r\n","E:\\React\\robomonkey\\src\\main\\Exams\\Details.jsx",["215"],"// app\r\nimport React from 'react';\r\nimport { useForm } from 'react-hook-form';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\n// components\r\nimport Card from '../../components/Card';\r\nimport Input from '../../components/Input';\r\nimport Radio from '../../components/Radio';\r\nimport InputWrapper from '../../components/InputWrapper';\r\nimport Form from '../../components/Form';\r\n\r\n// image\r\nimport DetailsIcon from '../../img/details-icon.svg';\r\nimport TypePaper from '../../img/type-paper.svg';\r\nimport TypeWizard from '../../img/type-wizard.svg';\r\n\r\nconst Details = () => {\r\n\r\n    const history = useHistory();\r\n    const { register, handleSubmit, errors } = useForm({ mode: 'onChange', defaultValues: { expiration: 'none', duration: 'none' } });\r\n    const onSubmit = (data) => history.push('/exams/new-exam/questions');\r\n\r\n    let form = {\r\n        title: {\r\n            attr: {\r\n                name: 'title',\r\n                className: ''\r\n            },\r\n            ref: register({\r\n                required: { value: true, message: \"Please enter a title\" },\r\n                maxLength: 50\r\n            }),\r\n            errors: errors.title\r\n        },\r\n        description: {\r\n            attr: {\r\n                name: 'description',\r\n                className: ''\r\n            },\r\n            ref: register({\r\n                required: false,\r\n                maxLength: 250\r\n            }),\r\n            errors: errors.description\r\n        },\r\n        type: {\r\n            vertical: false,\r\n            attr: {\r\n                name: 'type',\r\n                className: ''\r\n            },\r\n            options: [\r\n                {\r\n                    label: 'Paper',\r\n                    description: 'Show all questions in one page',\r\n                    icon: <img src={TypePaper} alt=\"TypePaper\" />,\r\n                    value: 'PAPER'\r\n                },\r\n                {\r\n                    label: 'Wizard',\r\n                    description: 'Show questions one at a time',\r\n                    icon: <img src={TypeWizard} alt=\"TypeWizard\" />,\r\n                    value: 'WIZARD'\r\n                }\r\n            ],\r\n            ref: register({\r\n                required: { value: true, message: \"Please select one\" },\r\n            }),\r\n            errors: errors.type\r\n        },\r\n        expiration: {\r\n            vertical: true,\r\n            attr: {\r\n                name: 'expiration',\r\n                className: '',\r\n            },\r\n            options: [\r\n                {\r\n                    label: 'none',\r\n                    value: 'none',\r\n                    default: true\r\n                },\r\n                {\r\n                    label: 'in a day',\r\n                    value: '+1'\r\n                },\r\n                {\r\n                    label: 'in 2 days',\r\n                    value: '+2',\r\n                },\r\n                {\r\n                    label: 'in 3 days',\r\n                    value: '+3',\r\n                },\r\n                {\r\n                    label: 'in a week',\r\n                    value: '+7',\r\n                }\r\n            ],\r\n            ref: register({\r\n                required: true\r\n            }),\r\n            errors: errors.expiration\r\n        },\r\n        duration: {\r\n            vertical: true,\r\n            attr: {\r\n                name: 'duration',\r\n                className: '',\r\n            },\r\n            options: [\r\n                {\r\n                    label: 'none',\r\n                    value: 'none',\r\n                },\r\n                {\r\n                    default: true,\r\n                    label: '1 hour',\r\n                    value: '+1',\r\n                },\r\n                {\r\n                    label: '2 hours',\r\n                    value: '+2',\r\n                },\r\n                {\r\n                    label: '3 hours',\r\n                    value: '+3',\r\n                },\r\n                {\r\n                    label: 'a day',\r\n                    value: '+24',\r\n                }\r\n            ],\r\n            ref: register({\r\n                required: true\r\n            }),\r\n            errors: errors.duration\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div style={{ maxWidth: \"50%\", margin: \"0 auto\" }}>\r\n            <Card title={<React.Fragment><img style={{ marginRight: \"5px\" }} src={DetailsIcon} /> Details</React.Fragment>}>\r\n                <Form onSubmit={handleSubmit(onSubmit)}>\r\n                    <InputWrapper label=\"Title\" htmlFor=\"title\" errors={errors}>\r\n                        <Input text attr={form['title'].attr} register={form['title'].ref} errors={form['title'].errors} />\r\n                    </InputWrapper>\r\n                    <InputWrapper label=\"Description\" htmlFor=\"description\" errors={errors} optional>\r\n                        <Input textArea attr={form['description'].attr} register={form['description'].ref} errors={form['description'].errors} />\r\n                    </InputWrapper>\r\n                    <InputWrapper label=\"Type\" htmlFor=\"type\" errors={errors}>\r\n                        <Radio attr={form['type'].attr} options={form['type'].options} register={form['type'].ref} vertical={form['type'].vertical} errors={form['type'].errors} />\r\n                    </InputWrapper>\r\n                    <InputWrapper label={<>Deadline <span className=\"subtitle\">(Optional)</span></>}>\r\n                        <div style={{ display: 'flex', justifyContent: 'space-around', padding: '20px', boxSizing: 'border-box' }}>\r\n                            <InputWrapper htmlFor=\"expiration\" errors={errors}>\r\n                                <h1 style={{ color: '#636363', fontSize: '13px', marginBottom: '10px', marginLeft: '42px' }}>Sheet Expiration</h1>\r\n                                <div style={{ display: 'flex', flexDirection: 'column' }}>\r\n                                    <Radio attr={form['expiration'].attr} options={form['expiration'].options} register={form['expiration'].ref} vertical={form['expiration'].vertical}>\r\n                                        <div className=\"radio-item\">\r\n                                            <input type=\"radio\" attr={form['expiration'].attr} ref={form['expiration'].register} />\r\n                                            <h1>custom</h1>\r\n                                        </div>\r\n                                    </Radio>\r\n                                </div>\r\n                            </InputWrapper>\r\n                            <InputWrapper htmlFor=\"duration\" errors={errors}>\r\n                                <h1 style={{ color: '#636363', fontSize: '13px', marginBottom: '10px', marginLeft: '42px' }}>Exam Duration</h1>\r\n                                <div style={{ display: 'flex', flexDirection: 'column' }} >\r\n                                    <Radio attr={form['duration'].attr} options={form['duration'].options} register={form['duration'].ref} vertical={form['duration'].vertical} />\r\n                                </div>\r\n                            </InputWrapper>\r\n                        </div>\r\n                    </InputWrapper>\r\n                </Form>\r\n            </Card>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Details\r\n","E:\\React\\robomonkey\\src\\main\\Exams\\Questions.jsx",["216"],"// app\r\nimport React, { useRef } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { useForm, useFieldArray } from 'react-hook-form';\r\n\r\n// components\r\nimport Card from '../../components/Card';\r\nimport Form from '../../components/Form';\r\nimport QuestionWrapper from '../../components/Question/QuestionWrapper';\r\n\r\n// icons\r\nimport QuestionsIcon from '../../img/questions-icon.svg';\r\nimport _QUESTION from '../../data/Question';\r\n\r\nconst Questions = () => {\r\n\r\n    const { register, control, handleSubmit, errors, setValue, getValues, watch, setError, formState } = useForm({ mode: 'onChange' });\r\n    const { fields, append, remove, insert } = useFieldArray({ name: `question`, control: control });\r\n\r\n    const questionRefs = useRef([]);\r\n\r\n    const onSubmit = data => {\r\n        console.table(data);\r\n    };\r\n\r\n    console.log('errors', errors);\r\n\r\n    const changeType = (newType, i) => {\r\n        remove(i - 1);\r\n        insert(i - 1, newType)\r\n    }\r\n\r\n    const additionalButtons = () => {\r\n        return <Link to=\"/exams/new-exam/details\" className=\"button bg-default hover\">Previous</Link>\r\n    }\r\n\r\n    return (\r\n        <Card title={<React.Fragment><img style={{ marginRight: \"5px\" }} src={QuestionsIcon} /> Questions</React.Fragment>}>\r\n            <div className=\"questions-container\">\r\n                <Form onSubmit={handleSubmit(onSubmit)} additionalButtons={additionalButtons()}>\r\n                    {\r\n                        fields.map((obj, i) => {\r\n                            return _QUESTION.GET[obj.value]({ questionRef: el => questionRefs.current[i] = el, key: obj.id, number: i + 1, id: obj.id, type: obj, changeTypeCallback: changeType, register: register, errors: errors, setValue: setValue, getValues: getValues, watch: watch, setError: setError, control: control, focus: true, formState: formState });\r\n                        })\r\n                    }\r\n                </Form>\r\n                <QuestionWrapper changeTypeCallback={(data) => append(data)} style={{ width: \"90%\", marginRight: \"auto\", marginLeft: \"auto\", marginBottom: \"40px\" }} />\r\n            </div>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default Questions\r\n","E:\\React\\robomonkey\\src\\main\\Exams\\Review.jsx",["217"],"import React from 'react';\r\nimport ReviewIcon from '../../img/review-icon.svg';\r\nimport Card from '../../components/Card';\r\n\r\nconst Review = () => {\r\n    return (\r\n        <Card title={<React.Fragment><img style={{ marginRight: \"5px\" }} src={ReviewIcon} /> Review</React.Fragment>}>\r\n            test\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default Review\r\n","E:\\React\\robomonkey\\src\\main\\Exams\\Finish.jsx",[],"E:\\React\\robomonkey\\src\\components\\Input\\index.jsx",[],"E:\\React\\robomonkey\\src\\components\\InputWrapper\\index.jsx",[],"E:\\React\\robomonkey\\src\\components\\Radio\\index.jsx",[],"E:\\React\\robomonkey\\src\\components\\Question\\index.jsx",["218","219"],"import React, { useState, Fragment } from 'react';\r\nimport Input from '../Input';\r\nimport InputWrapper from '../InputWrapper';\r\nimport Select from '../Select';\r\nimport Plus from '../../img/plus.svg';\r\nimport Times from '../../img/times.svg';\r\nimport _QUESTION from '../../data/Question';\r\nimport './style.scss';\r\n\r\nconst Question = (props) => {\r\n\r\n    const [selectedType, setSelectedType] = useState(props.type ? props.type : null);\r\n\r\n    const RenderNumber = () => {\r\n        if (props.number) return <><span>#</span>{props.number}</>\r\n        else return <img src={Plus} style={{ top: \"3px\", position: \"relative\" }} />\r\n    }\r\n\r\n    const selectOptionCallback = (option) => {\r\n        props.add ? props.add(option) : setSelectedType(option);\r\n    }\r\n\r\n    const RenderQuestion = () => {\r\n        if (selectedType)\r\n            switch (selectedType.value) {\r\n                case \"IDENTIFY\":\r\n                    return (\r\n                        <Fragment>\r\n                            <InputWrapper label=\"Question\" htmlFor={`question${props.number}`} errors={props.errors}>\r\n                                <Input text attr={{ name: `question${props.number}`, className: '' }} register={props.register} errors={props.errors[`question${props.number}`]} />\r\n                            </InputWrapper>\r\n                            <InputWrapper label=\"Answer\" htmlFor={`answer${props.number}`} errors={props.errors} style={{ marginTop: '20px' }}>\r\n                                <Input text attr={{ name: `answer${props.number}`, className: '' }} register={props.register} errors={props.errors[`answer${props.number}`]} />\r\n                            </InputWrapper>\r\n                        </Fragment>\r\n                    )\r\n                case \"MULTIPLE_CHOICE\":\r\n                    return (\r\n                        <Fragment>\r\n                            {/* <InputWrapper label=\"Question\" htmlFor=\"question\" error={props.errors}>\r\n                                <Input text attr={{ name: 'question', className: '' }} />\r\n                            </InputWrapper> */}\r\n                            <ul className=\"multiple-container\">\r\n                                <li>{ }</li>\r\n                            </ul>\r\n                        </Fragment>\r\n                    );\r\n                case \"TRUE_FALSE\":\r\n                    return (\r\n                        <Fragment>\r\n                        </Fragment>\r\n                    );\r\n                case \"MATCHING\":\r\n                    return (\r\n                        <Fragment>\r\n                        </Fragment>\r\n                    );\r\n                case \"ESSAY\":\r\n                    return (\r\n                        <Fragment>\r\n                        </Fragment>\r\n                    );\r\n                case \"CODE\":\r\n                    return (\r\n                        <Fragment>\r\n                        </Fragment>\r\n                    );\r\n                case \"VIDEO\":\r\n                    return (\r\n                        <Fragment>\r\n                        </Fragment>\r\n                    );\r\n                default:\r\n                    return (\r\n                        <Fragment>\r\n                        </Fragment>\r\n                    );\r\n            }\r\n        else return \"\";\r\n    }\r\n\r\n    return (\r\n        <div className=\"question-container\">\r\n            <span className=\"number\"><RenderNumber /></span>\r\n            <div className={`question-content ${!selectedType ? 'hold' : ''}`}>\r\n                <header>\r\n                    <div>\r\n                        <span>Type:</span> <Select choices={_QUESTION.CONSTANTS} selectedOption={selectedType} selectOptionCallback={selectOptionCallback} isStatic={props.add ? true : false} />\r\n                    </div>\r\n                    <div>\r\n                        <span>Points:</span> <input className=\"question-points select-container\" placeholder=\"1\" type=\"text\" />\r\n                    </div>\r\n                </header>\r\n                <div className=\"question-types\">\r\n                    <RenderQuestion />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Question\r\n",["220","221"],"E:\\React\\robomonkey\\src\\components\\Select\\index.jsx",[],"E:\\React\\robomonkey\\src\\components\\Question\\Identify.jsx",[],"E:\\React\\robomonkey\\src\\components\\Question\\QuestionWrapper.jsx",["222","223","224","225"],"import React, { useState } from 'react';\r\nimport Plus from '../../img/plus.svg';\r\nimport Times from '../../img/times.svg';\r\nimport Select from '../../components/Select';\r\nimport _QUESTION from '../../data/Question';\r\nimport './style.scss';\r\n\r\nconst QuestionWrapper = (props) => {\r\n\r\n    const p = props;\r\n    const e = p.errors;\r\n    const [selectedType, setSelectedType] = useState(p.type ? p.type : null);\r\n    const hasError = e && Object.keys(e).filter(name => p.errorNames.includes(name));\r\n\r\n    return (\r\n        <div ref={p.questionRef} onClick={p.onClick} className={`question-container ${hasError && hasError.length ? 'error' : ''}`} style={p.style}>\r\n            <span className=\"number\">{p.number ? <><span>#</span>{p.number}</> : <img src={Plus} style={{ top: \"3px\", position: \"relative\" }} />}</span>\r\n            <div className={`question-content ${!p.children ? 'hold' : ''}`}>\r\n                <header>\r\n                    <div>\r\n                        <span>Type:</span> <Select choices={_QUESTION.CONSTANTS} selectedOption={selectedType} selectOptionCallback={(option) => p.changeTypeCallback(option, p.number)} disabled />\r\n                    </div>\r\n                    <div>\r\n                        <span>Points:</span> <input className=\"question-points select-container\" placeholder=\"1\" type=\"text\" />\r\n                    </div>\r\n                </header>\r\n                <div>\r\n                    {p.children}\r\n                </div>\r\n                {\r\n                    hasError &&\r\n                    (\r\n                        <footer>\r\n                            <div className=\"errors\">\r\n                                {hasError.slice(0, 3).map((text, i) => {\r\n                                    try {\r\n                                        return <span key={i}>{e[text].message}</span>\r\n                                    } catch (e) {\r\n                                        console.log(e);\r\n                                    }\r\n                                })}\r\n                            </div>\r\n                            {/* {p.errors[`choiceNew-${p.id}`] && <span>{p.errors[`choiceNew-${p.id}`].message}</span>} */}\r\n                        </footer>\r\n                    )\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default QuestionWrapper\r\n","E:\\React\\robomonkey\\src\\data\\Question.js",["226","227"],"import Code from '../components/Question/Code';\r\nimport Essay from '../components/Question/Essay';\r\nimport Identify from '../components/Question/Identify'; \r\nimport Matching from '../components/Question/Matching';\r\nimport MultipleChoice from '../components/Question/MultipleChoice';\r\nimport TrueFalse from '../components/Question/TrueFalse';\r\nimport Video from '../components/Question/Video';\r\n\r\nclass QuestionType {\r\n    constructor(label, value, component){\r\n        this.label = label;\r\n        this.value = value;\r\n        this.component = component;\r\n    }\r\n    getComponent() {\r\n        return this.component;\r\n    }\r\n}\r\n\r\nconst consants = {\r\n    IDENTIFY: { label: \"Identify\", value: \"IDENTIFY\" },\r\n    MULTIPLE_CHOICE: { label: \"Multiple Choice\", value: \"MULTIPLE_CHOICE\" },\r\n    TRUE_FALSE: { label: \"True / False\", value: \"TRUE_FALSE\" },\r\n    MATCHING: { label: \"Matching\", value: \"MATCHING\" },\r\n    ESSAY: { label: \"Essay\", value: \"ESSAY\" },\r\n    CODE: { label: \"Code\", value: \"CODE\" },\r\n    VIDEO: { label: \"Video\", value: \"VIDEO\" },\r\n}\r\n\r\nexport default {\r\n    CONSTANTS: consants,\r\n    GET: {\r\n        IDENTIFY: (props) => <Identify {...props} />,\r\n        MULTIPLE_CHOICE: (props) => <MultipleChoice {...props} />,\r\n        TRUE_FALSE: (props) => <TrueFalse {...props} />,\r\n        MATCHING: (props) => <Matching {...props} />,\r\n        ESSAY: (props) => <Essay {...props} />,\r\n        CODE: (props) => <Code {...props} />,\r\n        VIDEO: (props) => <Video {...props} />\r\n    }\r\n}","E:\\React\\robomonkey\\src\\components\\Question\\MultipleChoice.jsx",["228","229"],"import React, { useEffect } from 'react';\r\nimport { useFieldArray } from 'react-hook-form';\r\nimport Input from '../Input';\r\nimport InputWrapper from '../InputWrapper';\r\nimport QuestionWrapper from './QuestionWrapper';\r\nimport _ERROR_MESSAGE from '../../data/ErrorMessage';\r\nimport './style.scss';\r\n\r\nconst MultipleChoice = (props) => {\r\n    let p = props;\r\n    const qName = `question-${p.id}`;\r\n    const aName = `answer-${p.id}`;\r\n    const cName = `multiple-choice-${p.id}`;\r\n    const nName = `choice-new-${p.id}`;\r\n    const watch = p.watch(aName);\r\n    const { fields, append, remove } = useFieldArray({ name: cName, control: p.control });\r\n    let hasError = p.errors && p.errors[aName] && p.errors[aName].type === \"required\";\r\n\r\n    useEffect(() => {\r\n        p.setValue(nName, '')\r\n    }, [fields])\r\n\r\n    return (\r\n        <QuestionWrapper id={p.id} number={p.number} type={p.type} changeTypeCallback={p.changeTypeCallback} errors={p.errors} errorNames={[qName, aName, cName, nName]}>\r\n            <div className=\"question-types multiple-choice\">\r\n                <InputWrapper label=\"Question\" htmlFor={qName} errors={p.errors}>\r\n                    <Input text attr={{ name: qName, className: '', autoFocus: p.focus }} register={p.register({ required: { value: true, message: _ERROR_MESSAGE.GENERAL.QUESTION } })} errors={p.errors[qName]} />\r\n                </InputWrapper>\r\n                <InputWrapper label={<>Options <span className=\"subtitle\">(Click on an option's letter to specify the correct answer)</span></>} htmlFor={qName} errors={p.errors}>\r\n                    <div className={`options-wrapper ${hasError ? 'has-error' : ''}`}>\r\n                        {fields.map((field, i) => {\r\n                            let myVal = String.fromCharCode(97 + i);\r\n                            return (\r\n                                <div className=\"choice-container\" key={field.id}>\r\n                                    <input type=\"radio\" name={aName} value={myVal} ref={p.register({ required: { value: fields.length > 1, message: _ERROR_MESSAGE.MULTIPLE_CHOICE.REQUIRED_ANSWER } })} hidden tabIndex=\"-1\" />\r\n                                    <button className={`letter ${p.getValues(aName) === myVal ? 'active' : ''} ${hasError ? 'blink' : ''}`} onClick={() => p.setValue(aName, myVal, { shouldValidate: true, shouldDirty: true })} type=\"button\" ><span>{myVal}</span></button>\r\n                                    <Input text attr={{ defaultValue: field.text, name: `${cName}[${i}].text`, autoFocus: i === (fields.length - 1) ? true : false }} register={p.register()} onChange={(e) => !e.target.value && remove(i)} />\r\n                                </div>\r\n                            )\r\n                        })}\r\n                    </div>\r\n                    {/* add a blank one on the bottom for adding */}\r\n                    <div className=\"choice-container\">\r\n                        <button className=\"letter add\" type=\"button\" tabIndex=\"-1\"><span>{String.fromCharCode(97 + fields.length)}</span></button>\r\n                        <div className={`text ${p.errors ? 'danger' : ''}`}>\r\n                            <input type=\"text\" name={nName} placeholder=\"Type to add new option\" ref={p.register({ required: { value: fields.length < 2, message: _ERROR_MESSAGE.MULTIPLE_CHOICE.REQUIRED_CHOICES } })} onChange={(e) => append({ text: e.target.value })} />\r\n                        </div>\r\n                    </div>\r\n                </InputWrapper>\r\n            </div>\r\n        </QuestionWrapper>\r\n    )\r\n}\r\n\r\nexport default MultipleChoice\r\n","E:\\React\\robomonkey\\src\\components\\Question\\Code.jsx",[],"E:\\React\\robomonkey\\src\\components\\Question\\Essay.jsx",[],"E:\\React\\robomonkey\\src\\components\\Question\\Matching.jsx",["230","231","232","233","234","235"],"import React, { useState, useEffect, useRef } from 'react';\r\nimport { useFieldArray } from 'react-hook-form';\r\nimport Input from '../Input';\r\nimport InputWrapper from '../InputWrapper';\r\nimport QuestionWrapper from './QuestionWrapper';\r\nimport _ERROR_MESSAGE from '../../data/ErrorMessage';\r\nimport _COLORS from '../../data/Colors';\r\nimport './style.scss';\r\nimport MatchInput from '../MatchInput';\r\n\r\nimport _STYLE_VARS from '../../variables.scss';\r\n\r\nclass Column {\r\n    constructor(title, name, inputName, watchTitle) {\r\n        this.title = title;\r\n        this.name = name;\r\n        this.inputName = inputName;\r\n        this.watchTitle = watchTitle;\r\n    }\r\n}\r\n\r\nconst Matching = (props) => {\r\n\r\n    const p = props;\r\n    const qName = `question-${p.id}`;\r\n    const aName = `answer-${p.id}`;\r\n    const c1 = new Column(`column-1-title-${p.id}`, `column-1-name-${p.id}`, `new-column-1-${p.id}`, p.watch(`column-1-title-${p.id}`, \"Column A\"));\r\n    const c2 = new Column(`column-2-title-${p.id}`, `column-2-name-${p.id}`, `new-column-2-${p.id}`, p.watch(`column-2-title-${p.id}`, \"Column B\"));\r\n    const { fields: c1Fields, append: c1Append, remove: c1Remove } = useFieldArray({ name: c1.name, control: p.control });\r\n    const { fields: c2Fields, append: c2Append, remove: c2Remove } = useFieldArray({ name: c2.name, control: p.control });\r\n    const dotContainerRefs = { c1: useRef([]), c2: useRef([]) }\r\n    const dotRefs = { c1: useRef([]), c2: useRef([]) }\r\n\r\n    const [colors, setColors] = useState(_COLORS);\r\n    const [dot, setDot] = useState(null);\r\n\r\n    // render line\r\n    const setLine = (dot, pageX, pageY, startX, startY, move) => {\r\n        if (dot) {\r\n            let allowance = 0;\r\n            if (move) { pageY += window.pageYOffset; allowance = 17 }\r\n            let calcX = pageX > startX ? (pageX - startX - (allowance)) : (startX - pageX + (allowance));\r\n            let calcY = pageY > startY ? (pageY - startY - (allowance)) : (startY - pageY + (allowance));\r\n            let totalLength = Math.sqrt(Math.pow(Math.abs(calcX) + 11, 2) + Math.pow(Math.abs(calcY) + 11, 2))\r\n            let angle = Math.atan2(pageX - startX - allowance, - (pageY - (startY) - allowance)) * (180 / Math.PI);\r\n            let ref = dotRefs[`c${dot.col}`].current[dot.index];\r\n            if (ref) {\r\n                ref.style.height = `${totalLength}px`;\r\n                ref.style.transform = `rotate(${(angle + 180) % 360}deg)`;\r\n            }\r\n        }\r\n    }\r\n\r\n    // reset dot\r\n    const resetTarget = (clickedDot) => {\r\n        if (clickedDot) {\r\n            let i = clickedDot.col === 1 ? c2Fields.findIndex(obj => obj.matched && obj.matched.id === clickedDot.id) : c1Fields.findIndex(obj => obj.matched && obj.matched.id === clickedDot.id);\r\n            if (i > -1) {\r\n                let clicked = getField(clickedDot);\r\n                let matched = getField({ col: clickedDot.col === 1 ? 2 : 1, index: i })\r\n                addColor(clickedDot.col === 1 ? c1Fields[clickedDot.index].matched.color : c2Fields[clickedDot.index].matched.color);\r\n                delete clicked.matched;\r\n                delete matched.matched;\r\n                dotRefs[`c${clickedDot.col}`].current[clickedDot.index].style.height = dotRefs[`c${clickedDot.col === 1 ? 2 : 1}`].current[i].style.height = `${16}px`;\r\n            }\r\n            getField(clickedDot)\r\n            !c1Fields.filter(obj => obj.matched).length && p.setValue(aName, null, { shouldValidate: true, shouldDirty: true });\r\n        }\r\n        dotRefs[`c${clickedDot.col}`].current[clickedDot.index].style.height = `${16}px`;\r\n        setDot(null);\r\n    }\r\n\r\n    // on dot click\r\n    const clickDot = (e, clickedDot) => {\r\n        e.stopPropagation();\r\n        if (clickedDot) { // clicked on a dot\r\n            if (dot) { // has active dot\r\n                if (dot.col !== clickedDot.col && !getField(clickedDot).matched) { // is opposing dot of the active dot\r\n                    // set matched\r\n                    let newColor = getColor(getField(dot).matched && getField(dot).matched.color);\r\n                    getField(dot).matched = { id: clickedDot.id, color: newColor, source: true };\r\n                    getField(clickedDot).matched = { id: dot.id, color: newColor, source: false };\r\n                    setLine(dot, getField(clickedDot).rect.x, getField(clickedDot).rect.y, getField(dot).rect.x, getField(dot).rect.y, false);\r\n                    // clear active dot\r\n                    setDot(null);\r\n                    // resetTarget(clickedDot);\r\n                    p.setValue(aName, \"matched\", { shouldValidate: true, shouldDirty: true });\r\n                }\r\n            } else { // no active dot = set active dot / start line\r\n                getField(clickedDot).matched && resetTarget(clickedDot);\r\n                setDot(clickedDot);\r\n            }\r\n        } else { // did not click on a dot\r\n            dot && resetTarget(dot);\r\n        }\r\n    }\r\n\r\n    const addColor = (color) => setColors({ ...colors, ...color });\r\n    const getColor = () => {\r\n        let colorsCopy = { ...colors };\r\n        let keys = Object.keys(colors);\r\n        let key = keys[keys.length * Math.random() << 0];\r\n        let newColor = { [key]: colorsCopy[key] }\r\n        delete colorsCopy[key];\r\n        setColors(colorsCopy);\r\n        return newColor;\r\n    }\r\n\r\n    const getField = (dot) => dot ? (dot.col === 1 ? c1Fields[dot.index] : c2Fields[dot.index]) : null;\r\n    const mouseMove = (e) => dot && setLine(dot, e.clientX, e.clientY, getField(dot).rect.x, getField(dot).rect.y, true);\r\n\r\n    const removeField = (index, field) => {\r\n        field.col === 1 ? c1Remove(index) : c2Remove(index);\r\n        resetTarget(field);\r\n    }\r\n\r\n    useEffect(() => {\r\n        [c1Fields, c2Fields].map((fieldGroup, i) => {\r\n            let col = i + 1;\r\n            fieldGroup.map((obj, i) => {\r\n                obj.index = i;\r\n                let rect = dotContainerRefs[`c${col}`].current[i].getBoundingClientRect();\r\n                obj.rect = { x: rect.x, y: rect.y + window.pageYOffset }\r\n                if (obj.matched && obj.matched.source) {\r\n                    let otherColIndex = col === 1 ? c2Fields.findIndex(field => field.matched && field.matched.id === obj.id) : c1Fields.findIndex(field => field.matched && field.matched.id === obj.id);\r\n                    let newDestinationRect = dotContainerRefs[`c${col === 1 ? 2 : 1}`].current[otherColIndex].getBoundingClientRect();\r\n                    setLine(obj, newDestinationRect.x, newDestinationRect.y + window.pageYOffset, obj.rect.x, obj.rect.y, false);\r\n                }\r\n            })\r\n        })\r\n        p.setValue(c1.inputName, '');\r\n        p.setValue(c2.inputName, '');\r\n    }, [c1Fields, c2Fields])\r\n\r\n    useEffect(() => {\r\n        window.onmousemove = mouseMove;\r\n        return () => window.removeEventListener('onmousemove', mouseMove);\r\n    }, [dot])\r\n\r\n    useEffect(() => { p.register(aName, { required: { value: true, message: 'Please match at least 2 fields from each columns' } }) }, [p.register])\r\n\r\n    return (\r\n        <QuestionWrapper questionRef={p.questionRef} onClick={clickDot} move={mouseMove} id={p.id} number={p.number} type={p.type} changeTypeCallback={p.changeTypeCallback} errors={p.errors} errorNames={[qName, aName, c1.title, c2.title, c1.name, c2.name, c1.inputName, c2.inputName]}>\r\n            <div className=\"question-types matching\">\r\n                <InputWrapper label=\"Instructions\" htmlFor={qName} errors={p.errors}>\r\n                    <Input text attr={{ name: qName, placeholder: _ERROR_MESSAGE.GENERAL.QUESTION }} register={p.register({ required: { value: true, message: _ERROR_MESSAGE.GENERAL.QUESTION } })} errors={p.errors[qName]} />\r\n                </InputWrapper>\r\n                <div style={{ display: \"flex\", justifyContent: \"center\", padding: \"20px\" }}>\r\n                    <InputWrapper label=\"\" htmlFor={c1.name} errors={p.errors}>\r\n                        <div className=\"choice-container\">\r\n                            <Input text attr={{ name: c1.title, className: 'title right', placeholder: \"Column A\" }} register={p.register()} />\r\n                        </div>\r\n                        <div className=\"options-wrapper\">\r\n                            {c1Fields.map((field, i) => {\r\n                                return (\r\n                                    <MatchInput\r\n                                        key={field.id}\r\n                                        index={i}\r\n                                        dotRef={el => dotRefs.c1.current[i] = el}\r\n                                        dotContainerRef={el => dotContainerRefs.c1.current[i] = el}\r\n                                        activeDot={dot}\r\n                                        name={`${c1.name}[${i}].text`}\r\n                                        field={field}\r\n                                        fields={c1Fields}\r\n                                        register={p.register()}\r\n                                        onChange={(e) => !e.target.value && removeField(i, field)}\r\n                                        onClick={clickDot}\r\n                                    />\r\n                                )\r\n                            })}\r\n                        </div>\r\n                        {c1Fields.length < 10 && (\r\n                            <div className=\"match-input-container\">\r\n                                <div className=\"choice-container disabled\">\r\n                                    <div className={`text flex ${p.errors[c1.name] ? 'danger' : ''}`}>\r\n                                        <input type=\"text\" className=\"right\" name={c1.inputName} ref={p.register({ required: { value: !c1Fields.length, message: _ERROR_MESSAGE.MATCHING.REQUIRED_CHOICES(c1.watchTitle ? c1.watchTitle : \"Column A\") } })} placeholder=\"Type to add new option\" onChange={(e) => c1Append({ text: e.target.value, col: 1 })} />\r\n                                        <div className=\"choice-container\"><div className=\"match-point disabled\" style={{ border: \"none\" }}></div></div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        )}\r\n                    </InputWrapper>\r\n                    <div className={`matching-error ${p.errors && p.errors[aName] && p.errors[aName].type === 'required' && c1Fields.length && c2Fields.length ? 'has-error' : ''} ${c1Fields.length === 10 || c2Fields.length === 10 ? 'max' : ''}`}></div>\r\n                    <InputWrapper label=\"\" htmlFor={c2.name} errors={p.errors} style={{ marginTop: \"0\" }}>\r\n                        <div className=\"options-wrapper\">\r\n                            <div className=\"choice-container\" style={{ display: \"flex\", flexDirection: \"row-reverse\" }}>\r\n                                <Input text attr={{ name: c2.title, className: 'title left', placeholder: \"Column B\" }} register={p.register} />\r\n                            </div>\r\n                            {c2Fields.map((field, i) => {\r\n                                return (\r\n                                    <MatchInput\r\n                                        reverse\r\n                                        key={field.id}\r\n                                        index={i}\r\n                                        dotRef={el => dotRefs.c2.current[i] = el}\r\n                                        dotContainerRef={el => dotContainerRefs.c2.current[i] = el}\r\n                                        activeDot={dot}\r\n                                        name={`${c2.name}[${i}].text`}\r\n                                        field={field}\r\n                                        fields={c2Fields}\r\n                                        register={p.register()}\r\n                                        onChange={(e) => !e.target.value && removeField(i, field)}\r\n                                        onClick={clickDot}\r\n                                    />\r\n                                )\r\n                            })}\r\n                        </div>\r\n                        {c2Fields.length < 10 && (\r\n                            <div className=\"match-input-container\">\r\n                                <div className=\"choice-container disabled\" style={{ flexDirection: \"row-reverse\" }}>\r\n                                    <div style={{ display: \"flex\" }} className={`text ${p.errors[c2.name] ? 'danger' : ''}`}>\r\n                                        <div className=\"choice-container disabled\"><div className=\"match-point disabled\" style={{ border: \"none\" }}></div></div>\r\n                                        <input type=\"text\" name={c2.inputName} ref={p.register({ required: { value: !c2Fields.length, message: _ERROR_MESSAGE.MATCHING.REQUIRED_CHOICES(c2.watchTitle ? c2.watchTitle : \"Column B\") } })} placeholder=\"Type to add new option\" onChange={(e) => c2Append({ text: e.target.value, col: 2 })} />\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        )}\r\n                    </InputWrapper>\r\n                </div>\r\n            </div>\r\n        </QuestionWrapper >\r\n    )\r\n}\r\n\r\nexport default Matching\r\n","E:\\React\\robomonkey\\src\\components\\Question\\TrueFalse.jsx",["236","237"],"import React from 'react';\r\nimport Input from '../Input';\r\nimport InputWrapper from '../InputWrapper';\r\nimport QuestionWrapper from './QuestionWrapper';\r\nimport True from '../../img/true.svg';\r\nimport False from '../../img/false.svg';\r\nimport _ERROR_MESSAGE from '../../data/ErrorMessage';\r\nimport './style.scss';\r\n\r\nconst TrueFalse = (props) => {\r\n\r\n    const qName = `question-${props.id}`;\r\n    const aName = `answer-${props.id}`;\r\n    const watch = props.watch(aName);\r\n\r\n    const selectChoice = (choice) => props.setValue(aName, choice, { shouldValidate: true, shouldDirty: true })\r\n\r\n    return (\r\n        <QuestionWrapper id={props.id} number={props.number} type={props.type} changeTypeCallback={props.changeTypeCallback} errors={props.errors} errorNames={[qName, aName]}>\r\n            <div className=\"question-types true-false\">\r\n                <InputWrapper label=\"Question\" htmlFor={qName} errors={props.errors}>\r\n                    <Input text attr={{ name: qName, className: '' }} register={props.register({ required: { value: true, message: \"Question is required\" } })} errors={props.errors[qName]} />\r\n                </InputWrapper>\r\n                <InputWrapper htmlFor={qName} errors={props.errors}>\r\n                    <div className=\"true-false-container\">\r\n                        Is this\r\n                        <div className={props.errors && props.errors[aName] && props.errors[aName].type === 'required' ? 'has-error' : ''}>\r\n                            <button type=\"button\" className={`true bold ${props.getValues(aName) === \"TRUE\" ? 'active' : ''}`} onClick={() => selectChoice(\"TRUE\")}><img src={True} alt=\"True\" /> true</button>\r\n                            or\r\n                            <button type=\"button\" className={`false bold ${props.getValues(aName) === \"FALSE\" ? 'active' : ''}`} onClick={() => selectChoice(\"FALSE\")}><img src={False} alt=\"False\" /> false</button>?\r\n                        </div>\r\n                    </div>\r\n                    <input type=\"radio\" name={aName} value=\"TRUE\" ref={props.register({ required: { value: true, message: _ERROR_MESSAGE.TRUE_FALSE.REQUIRED } })} hidden readOnly />\r\n                    <input type=\"radio\" name={aName} value=\"FALSE\" ref={props.register({ required: { value: true, message: _ERROR_MESSAGE.TRUE_FALSE.REQUIRED } })} hidden readOnly />\r\n                </InputWrapper>\r\n            </div>\r\n        </QuestionWrapper>\r\n    )\r\n}\r\n\r\nexport default TrueFalse\r\n","E:\\React\\robomonkey\\src\\components\\Question\\Video.jsx",[],"E:\\React\\robomonkey\\src\\data\\ErrorMessage.js",["238"],"export default {\r\n    GENERAL: {\r\n        REQUIRED: (field) => <><span className=\"bold\">{field}</span> field is required</>,\r\n        QUESTION: \"Enter a question\",\r\n        ANSWER: \"Provide an answer for your question\"\r\n    },\r\n    MULTIPLE_CHOICE: {\r\n        REQUIRED_ANSWER: \"Please choose an answer from the list of choices\",\r\n        REQUIRED_CHOICES: \"Please add two or more choices to choose from\"\r\n    },\r\n    TRUE_FALSE: {\r\n        REQUIRED: \"Is your question true or false?\",\r\n    },\r\n    MATCHING: {\r\n        REQUIRED_CHOICES: (col) => <>Please add 1 or more choices to column <span className=\"bold\">{col}</span></>\r\n    }\r\n}","E:\\React\\robomonkey\\src\\components\\MatchInput\\index.jsx",["239"],"import React, { useRef } from 'react';\r\nimport Input from '../Input';\r\nimport './style.scss';\r\n\r\nconst MatchInput = (props) => {\r\n    let p = props;\r\n    let color = p.field.matched ? Object.keys(p.field.matched.color)[0] : '';\r\n    let type = p.field.matched && !p.field.matched.source && (p.activeDot && p.field.col !== p.activeDot.col) ? 'disabled' : '';\r\n    let callBack = (e) => p.onClick(e, { id: p.field.id, name: p.name, index: p.index, col: p.reverse ? 2 : 1 });\r\n    let events = {\r\n        onClick: callBack\r\n    }\r\n\r\n    return (\r\n        <div className={`match-input-container flex ${color}`}>\r\n            {/*  style={{ flexDirection: p.reverse ? 'row-reverse' : 'row' }} */}\r\n            <div className=\"choice-container\">\r\n                {\r\n                    p.reverse ?\r\n                        <>\r\n                            <div className=\"choice-container\">\r\n                                <button ref={p.dotContainerRef} className={`match-point ${p.activeDot && p.activeDot.id === p.field.id ? 'active' : ''} ${type}`} {...events}>\r\n                                    <div ref={p.dotRef} className={`dot ${p.activeDot && p.activeDot.id === p.field.id ? 'active' : ''}`}></div>\r\n                                </button>\r\n                            </div>\r\n                            <Input\r\n                                text\r\n                                attr={{\r\n                                    className: `match-input ${p.reverse ? \"left\" : \"right\"}`,\r\n                                    defaultValue: p.field.text,\r\n                                    name: p.name,\r\n                                    autoFocus: p.index === (p.fields.length - 1) ? true : false,\r\n                                }}\r\n                                register={p.register()}\r\n                                onChange={p.onChange}\r\n                            />\r\n                        </> :\r\n                        <>\r\n                            <Input\r\n                                text\r\n                                attr={{\r\n                                    className: `match-input ${p.reverse ? \"left\" : \"right\"}`,\r\n                                    defaultValue: p.field.text,\r\n                                    name: p.name,\r\n                                    autoFocus: p.index === (p.fields.length - 1) ? true : false,\r\n                                }}\r\n                                register={p.register()}\r\n                                onChange={p.onChange}\r\n                            />\r\n                            <div className=\"choice-container\">\r\n                                <button ref={p.dotContainerRef} className={`match-point ${p.activeDot && p.activeDot.id === p.field.id ? 'active' : ''} ${type}`} {...events}>\r\n                                    <div ref={p.dotRef} className={`dot ${p.activeDot && p.activeDot.id === p.field.id ? 'active' : ''}`}></div>\r\n                                </button>\r\n                            </div>\r\n                        </>\r\n                }\r\n                {/* <Input\r\n                    text\r\n                    attr={{\r\n                        className: `match-input ${p.reverse ? \"left\" : \"right\"}`,\r\n                        defaultValue: p.field.text,\r\n                        name: p.name,\r\n                        autoFocus: p.index === (p.fields.length - 1) ? true : false,\r\n                        tabIndex: \r\n                    }}\r\n                    register={p.register()}\r\n                    onChange={p.onChange}\r\n                />\r\n                <div className=\"choice-container\">\r\n                    <button tabIndex={p.reverse ? p.index + 2 : p.index + 1} ref={p.dotContainerRef} className={`match-point ${p.activeDot && p.activeDot.id === p.field.id ? 'active' : ''} ${type}`} {...events}>\r\n                        <div ref={p.dotRef} className={`dot ${p.activeDot && p.activeDot.id === p.field.id ? 'active' : ''}`}></div>\r\n                    </button>\r\n                </div> */}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MatchInput\r\n","E:\\React\\robomonkey\\src\\data\\Colors.js",["240"],"export default {\r\n    turquoise: \"#BDD9BF\",\r\n    pink: \"#FF4D80\",\r\n    yellow: \"#FED766\",\r\n    blue: \"#253D5B\",\r\n    brown: \"#F0A868\",\r\n    space_cadet: \"#2A324B\",\r\n    sky_blue: \"#52D1DC\",\r\n    ksu_purple: \"#592E83\",\r\n    red: \"#F4423C\",\r\n    green: \"#84F53D\"\r\n}","E:\\React\\robomonkey\\src\\components\\Form\\index.jsx",[],"E:\\React\\robomonkey\\src\\components\\TextEditor\\index.jsx",[],{"ruleId":"241","severity":1,"message":"242","line":21,"column":29,"nodeType":"243","endLine":21,"endColumn":81},{"ruleId":"244","severity":1,"message":"245","line":1,"column":17,"nodeType":"246","messageId":"247","endLine":1,"endColumn":25},{"ruleId":"248","severity":1,"message":"249","line":27,"column":50,"nodeType":"243","endLine":27,"endColumn":99},{"ruleId":"244","severity":1,"message":"250","line":5,"column":8,"nodeType":"246","messageId":"247","endLine":5,"endColumn":15},{"ruleId":"244","severity":1,"message":"251","line":21,"column":26,"nodeType":"246","messageId":"247","endLine":21,"endColumn":41},{"ruleId":"248","severity":1,"message":"249","line":32,"column":25,"nodeType":"243","endLine":32,"endColumn":55},{"ruleId":"248","severity":1,"message":"249","line":52,"column":71,"nodeType":"243","endLine":52,"endColumn":90},{"ruleId":"248","severity":1,"message":"249","line":55,"column":80,"nodeType":"243","endLine":55,"endColumn":102},{"ruleId":"248","severity":1,"message":"249","line":8,"column":13,"nodeType":"243","endLine":8,"endColumn":41},{"ruleId":"244","severity":1,"message":"252","line":7,"column":10,"nodeType":"246","messageId":"247","endLine":7,"endColumn":14},{"ruleId":"244","severity":1,"message":"253","line":91,"column":11,"nodeType":"246","messageId":"247","endLine":91,"endColumn":18},{"ruleId":"248","severity":1,"message":"249","line":97,"column":25,"nodeType":"243","endLine":97,"endColumn":43},{"ruleId":"248","severity":1,"message":"249","line":98,"column":25,"nodeType":"243","endLine":98,"endColumn":43},{"ruleId":"248","severity":1,"message":"249","line":106,"column":38,"nodeType":"243","endLine":106,"endColumn":87},{"ruleId":"244","severity":1,"message":"254","line":3,"column":8,"nodeType":"246","messageId":"247","endLine":3,"endColumn":12},{"ruleId":"248","severity":1,"message":"249","line":13,"column":52,"nodeType":"243","endLine":13,"endColumn":97},{"ruleId":"248","severity":1,"message":"249","line":13,"column":97,"nodeType":"243","endLine":13,"endColumn":132},{"ruleId":"244","severity":1,"message":"255","line":2,"column":10,"nodeType":"246","messageId":"247","endLine":2,"endColumn":18},{"ruleId":"256","severity":1,"message":"257","line":38,"column":8,"nodeType":"258","endLine":38,"endColumn":10,"suggestions":"259"},{"ruleId":"248","severity":1,"message":"249","line":144,"column":42,"nodeType":"243","endLine":144,"endColumn":98},{"ruleId":"248","severity":1,"message":"249","line":38,"column":38,"nodeType":"243","endLine":38,"endColumn":96},{"ruleId":"248","severity":1,"message":"249","line":7,"column":38,"nodeType":"243","endLine":7,"endColumn":93},{"ruleId":"244","severity":1,"message":"260","line":6,"column":8,"nodeType":"246","messageId":"247","endLine":6,"endColumn":13},{"ruleId":"248","severity":1,"message":"249","line":16,"column":21,"nodeType":"243","endLine":16,"endColumn":84},{"ruleId":"261","replacedBy":"262"},{"ruleId":"263","replacedBy":"264"},{"ruleId":"244","severity":1,"message":"260","line":3,"column":8,"nodeType":"246","messageId":"247","endLine":3,"endColumn":13},{"ruleId":"244","severity":1,"message":"265","line":12,"column":26,"nodeType":"246","messageId":"247","endLine":12,"endColumn":41},{"ruleId":"248","severity":1,"message":"249","line":17,"column":82,"nodeType":"243","endLine":17,"endColumn":145},{"ruleId":"266","severity":1,"message":"267","line":35,"column":69,"nodeType":"268","messageId":"269","endLine":35,"endColumn":71},{"ruleId":"244","severity":1,"message":"270","line":9,"column":7,"nodeType":"246","messageId":"247","endLine":9,"endColumn":19},{"ruleId":"271","severity":1,"message":"272","line":30,"column":1,"nodeType":"273","endLine":41,"endColumn":2},{"ruleId":"244","severity":1,"message":"274","line":15,"column":11,"nodeType":"246","messageId":"247","endLine":15,"endColumn":16},{"ruleId":"256","severity":1,"message":"275","line":21,"column":8,"nodeType":"258","endLine":21,"endColumn":16,"suggestions":"276"},{"ruleId":"244","severity":1,"message":"277","line":11,"column":8,"nodeType":"246","messageId":"247","endLine":11,"endColumn":19},{"ruleId":"266","severity":1,"message":"278","line":118,"column":50,"nodeType":"268","messageId":"279","endLine":118,"endColumn":52},{"ruleId":"266","severity":1,"message":"278","line":120,"column":37,"nodeType":"268","messageId":"279","endLine":120,"endColumn":39},{"ruleId":"256","severity":1,"message":"280","line":133,"column":8,"nodeType":"258","endLine":133,"endColumn":28,"suggestions":"281"},{"ruleId":"256","severity":1,"message":"282","line":138,"column":8,"nodeType":"258","endLine":138,"endColumn":13,"suggestions":"283"},{"ruleId":"256","severity":1,"message":"284","line":140,"column":136,"nodeType":"258","endLine":140,"endColumn":148,"suggestions":"285"},{"ruleId":"244","severity":1,"message":"274","line":14,"column":11,"nodeType":"246","messageId":"247","endLine":14,"endColumn":16},{"ruleId":"248","severity":1,"message":"286","line":30,"column":168,"nodeType":"243","endLine":30,"endColumn":199},{"ruleId":"271","severity":1,"message":"272","line":1,"column":1,"nodeType":"273","endLine":17,"endColumn":2},{"ruleId":"244","severity":1,"message":"287","line":1,"column":17,"nodeType":"246","messageId":"247","endLine":1,"endColumn":23},{"ruleId":"271","severity":1,"message":"272","line":1,"column":1,"nodeType":"273","endLine":12,"endColumn":2},"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","'Details' is defined but never used.","'setChoiceStatus' is assigned a value but never used.","'Link' is defined but never used.","'getLink' is assigned a value but never used.","'Card' is defined but never used.","'Redirect' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'history' and 'part'. Either include them or remove the dependency array.","ArrayExpression",["288"],"'Times' is defined but never used.","no-native-reassign",["289"],"no-negated-in-lhs",["290"],"'setSelectedType' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'QuestionType' is defined but never used.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","'watch' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'nName' and 'p'. Either include them or remove the dependency array.",["291"],"'_STYLE_VARS' is defined but never used.","Array.prototype.map() expects a return value from arrow function.","expectedInside","React Hook useEffect has missing dependencies: 'c1.inputName', 'c2.inputName', 'dotContainerRefs', 'p', and 'setLine'. Either include them or remove the dependency array.",["292"],"React Hook useEffect has a missing dependency: 'mouseMove'. Either include it or remove the dependency array.",["293"],"React Hook useEffect has missing dependencies: 'aName' and 'p'. Either include them or remove the dependency array.",["294"],"Invalid alt value for img. Use alt=\"\" for presentational images.","'useRef' is defined but never used.",{"desc":"295","fix":"296"},"no-global-assign","no-unsafe-negation",{"desc":"297","fix":"298"},{"desc":"299","fix":"300"},{"desc":"301","fix":"302"},{"desc":"303","fix":"304"},"Update the dependencies array to be: [history, part]",{"range":"305","text":"306"},"Update the dependencies array to be: [fields, nName, p]",{"range":"307","text":"308"},"Update the dependencies array to be: [c1.inputName, c1Fields, c2.inputName, c2Fields, dotContainerRefs, p, setLine]",{"range":"309","text":"310"},"Update the dependencies array to be: [dot, mouseMove]",{"range":"311","text":"312"},"Update the dependencies array to be: [aName, p, p.register]",{"range":"313","text":"314"},[1387,1389],"[history, part]",[798,806],"[fields, nName, p]",[6725,6745],"[c1.inputName, c1Fields, c2.inputName, c2Fields, dotContainerRefs, p, setLine]",[6897,6902],"[dot, mouseMove]",[7042,7054],"[aName, p, p.register]"]